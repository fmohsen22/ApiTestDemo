package com.postcodes.helper;import com.postcodes.framework.MyLogger;import java.util.*;public class Util {    public static String join(String input){        return "'"+input+"'";    }    public static String joinQuatation(String input){        return "\""+input+"\"";    }    public static void responseReader(Class clazz, int resp){        switch (resp){            case 200:                MyLogger.InfoLog(clazz,"Response = 200, successful request.");                break;            case 400:                MyLogger.WarnLog(clazz,"Response = 400, bad request!");                break;            case 404:                MyLogger.ErrorLog(clazz, "Response = 404, not found!");                break;            case 500:                MyLogger.FatalLog(clazz, "Response = 500, Internal Server Error. Please try again later!");                break;        }    }    public static void result(Map<String,String> reqAns){        List<String> printList = new ArrayList<>();        SortedSet<String> Key = new TreeSet<String>(reqAns.keySet());        int i =0;        for (String s: Key){            i++;//            MyLogger.resInfoLog(Util.class,"Your "+i+" request & answer: \n"+reqAns.get(s));            if (!reqAns.get(s).contains("Request")){                printList.add(reqAns.get(s));            }else {                printList.add("\nYour " + i + " trial: \n" + reqAns.get(s));            }        }        String [] printable = new String[printList.size()];        int p=0;        for (String s: printList){            printable[p]=s;            p++;        }        printBox(printable);    }    private static int getMaxLength(String... strings) {        int len = Integer.MIN_VALUE;        for (String str : strings) {            len = Math.max(str.length(), len);        }        return len;    }    private static String padString(String str, int len) {        StringBuilder sb = new StringBuilder(str);        return sb.append(fill(' ', len - str.length())).toString();    }    private static String fill(char ch, int len) {        StringBuilder sb = new StringBuilder(len);        for (int i = 0; i < len; i++) {            sb.append(ch);        }        return sb.toString();    }    public static void printBox(String... strings) {        int maxBoxWidth = getMaxLength(strings);        String line = "+" + fill('-', maxBoxWidth + 2) + "+";        System.out.println(line);        for (String str : strings) {            System.out.printf(" %s %n", padString(str, maxBoxWidth));        }        System.out.println(line);    }}