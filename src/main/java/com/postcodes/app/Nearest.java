package com.postcodes.app;import com.postcodes.app.apiconnector.GetMethods;import java.util.Arrays;import java.util.LinkedList;import java.util.List;import static com.postcodes.helper.JsonReader.jsonArray;public class Nearest extends POCValidation{    List<CountryRegion> countryRegionList;    public Nearest(String input) {        super(input);        setCountryRegionList();    }    public static Nearest of(String input){return new Nearest(input);}    public List<CountryRegion> getCountryRegionList() {        return countryRegionList;    }    public void setCountryRegionList() {        this.countryRegionList = findNearest();    }    public List<CountryRegion> findNearest(){        List<CountryRegion> countryRegionList = new LinkedList<>();        // @formatter: off            String jsonContent  = GetMethods.simpleGetRequest(config().getProperty("base.url").                    concat(config().getProperty("postcodes.path"))+getInput()+config().                    getProperty("near.code.extension"));           String [] postcode = (String[])  Arrays.stream(                   jsonArray(jsonContent, "result", "postcode","country","region")           ).toArray()[0];           String [] country = (String[])  Arrays.stream(                   jsonArray(jsonContent, "result", "postcode","country","region")           ).toArray()[1];           String [] region = (String[])  Arrays.stream(                   jsonArray(jsonContent, "result", "postcode","country","region")           ).toArray()[2];        // @formatter: on           int max = postcode.length;            for (int i=0;i<max;i++){               countryRegionList.add(new  CountryRegion(postcode[i]).withCountry(country[i]).withRegion(region[i]));           }        return countryRegionList;    }}