package com.postcodes.app;import com.postcodes.app.apiconnector.GetMethods;import com.postcodes.framework.MyLogger;import com.postcodes.helper.Util;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.time.LocalTime;import java.time.format.DateTimeFormatter;import java.util.*;public class Run {    public void runApp() throws IOException {        /**         * Ask for the order:         * 1- Validate the postcode parameter, invalid postcodes should produce an error message         * 2- country and region for that postcode.         * 3- list of the nearest postcodes, and their countries and regions.         */        String userInput ="";        String menuInput = "";        while (!menuInput.equals("n")) {            Scanner scanner = new Scanner(System.in);            MyLogger.resInfoLog(Run.class, "Please enter the Postcode here: ");            userInput = scanner.nextLine();            MyLogger.resInfoLog(Run.class, "Your input : " + userInput);            MyLogger.resInfoLog(Run.class, "Please choose \n" +                    "\n1 if you want to Validate the postcode parameter" +                    "\n2 if you want to know country and region for that postcode" +                    "\n3 if you want the list of the nearest postcodes, and their countries and regions");            //just integer is required            while (!scanner.hasNextInt()) {                MyLogger.WarnLog(Run.class, "Integer required! Please enter a number");                scanner.nextLine();            }            //choose one of the options            int function = scanner.nextInt();            function =options(function, userInput);            //incase the input was wronge            while (function==-1){                MyLogger.resInfoLog(Run.class, "Please Choose a correct option, it could be 1, 2 or 3.");                //just integer is required                while (!scanner.hasNextInt()) {                    MyLogger.WarnLog(Run.class, "Integer required! Please enter a number");                    scanner.nextLine();                }                function = scanner.nextInt();                function = options(function, userInput);            }            MyLogger.resInfoLog(Run.class, "Do you want to finish the process? (y/n) " +                    "\nPress 'n' if you want to finish." +                    "\nPress 'y' if you want to go to menu again.");            menuInput = scanner.next();            if (menuInput.equals("n")){                MyLogger.resInfoLog(Run.class,"Thank you so much, the Program is ended.");            }        }    }    public int options(int function, String userInput){        int func =0;        switch (function) {            case 1:                Util.result(checkValidation(userInput));                break;            case 2:                Util.result(findCountryRegion(userInput));                break;            case 3:                Util.result(findNearest(userInput));                break;            default:                MyLogger.WarnLog(Run.class, "Invalid input!");                func =-1;                break;        }        return func;    }    public Map<String, String> checkValidation(String userInput){        Map<String, String> reqAns = new HashMap<>();        if (POCValidation.of(userInput).isValidCode()){            MyLogger.resInfoLog(GetMethods.class, Util.join(userInput)+" is a valide Code");        // @formatter: off            reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                    "Request: Evaluate the Validation of "+Util.join(userInput)+                    "\n"+"Answer: "+Util.join(userInput)+" is a valide Code");        // @formatter: on        }else {            while (!POCValidation.of(userInput).isValidCode()) {                MyLogger.WarnLog(GetMethods.class, "Sorry, but " + Util.join(userInput)                        + " is not a valide Code, please Enter the correct Code here:");                reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                        "Request: Evaluate the Validation of "+Util.join(userInput)+"\n"+                        "Answer: Sorry, but " + Util.join(userInput)                                + " is not a valide Code, please Enter the correct Code.");                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));                try {                    userInput = reader.readLine();                } catch (IOException e) {                    MyLogger.ErrorLog(Run.class, e.getMessage());                }                MyLogger.resInfoLog(Run.class,"Your input : "+userInput);                if (POCValidation.of(userInput).isValidCode()){                    MyLogger.resInfoLog(GetMethods.class, Util.join(userInput)+" is a valide Code");                    reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                            "Request: Evaluate the Validation of "+Util.join(userInput)+"\n"+"Answer: "+                            Util.join(userInput)+" is a valide Code");                }            }        }        return reqAns;    }    public Map<String, String> findCountryRegion(String userInput){        Map<String, String> reqAns = new HashMap<>();        String country = "";        String region ="";        if (POCValidation.of(userInput).isValidCode()){            country =  CountryRegion.of(userInput).findCountryRegion().getCountry();            region =CountryRegion.of(userInput).findCountryRegion().getRegion();            MyLogger.resInfoLog(GetMethods.class, "Country: "+ country);            MyLogger.resInfoLog(GetMethods.class, "\nRegion: "+ region);            reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                    "Request: Find the Country and Region for "+Util.join(userInput)+"\n"                            +"Answer: \n"+                            "Country: "+ country+                            "\nRegion: "+ region);        }else {            while (!POCValidation.of(userInput).isValidCode()) {                MyLogger.WarnLog(GetMethods.class, "Sorry, but " + Util.join(userInput)                        + " is not a valide Code, please Enter the correct Code here:");                reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                        "Request: Find the Country and Region for "+Util.join(userInput)+"\n"+                                "Answer: Sorry, but " + Util.join(userInput)                                + " is not a valide Code, please Enter the correct Code.");                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));                try {                    userInput = reader.readLine();                } catch (IOException e) {                    MyLogger.ErrorLog(Run.class, e.getMessage());                }                MyLogger.resInfoLog(Run.class,"Your input : "+userInput);                if (POCValidation.of(userInput).isValidCode()){                    country =  CountryRegion.of(userInput).findCountryRegion().getCountry();                    region =CountryRegion.of(userInput).findCountryRegion().getRegion();                    MyLogger.resInfoLog(GetMethods.class, "Country: "+ country);                    MyLogger.resInfoLog(GetMethods.class, "\nRegion: "+ region);                    reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                            "Request: Find the Country and Region for "+Util.join(userInput)+"\n"                                    +"Answer: \n"+                                    "Country: "+ country+                                    "\nRegion: "+ region);                }            }        }        return reqAns;    }    public Map<String, String> findNearest(String userInput){        Map<String, String> reqAns = new HashMap<>();        String pco="";        String country = "";        String region ="";        List<CountryRegion> nearestList ;        if (POCValidation.of(userInput).isValidCode()){            nearestList = new ArrayList<CountryRegion>(Nearest.of(userInput).findNearest());            reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                    "Request: Find the nearest Postcode, Country and Region for " + Util.join(userInput) + "\n"                            + "Answer: \n" );            for (int i = 0; i< nearestList.size();i++) {                pco = nearestList.get(i).getInput();                country = nearestList.get(i).getCountry();                region = nearestList.get(i).getRegion();                MyLogger.resInfoLog(GetMethods.class, "Postcode: " + pco);                MyLogger.resInfoLog(GetMethods.class, "Country: " + country);                MyLogger.resInfoLog(GetMethods.class, "Region: " + region);                // @formatter: off                reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                        (i+1)+ ") \n"+                                "Postcode: " + pco +                                "\nCountry: " + country +                                "\nRegion: " + region +"\n");                // @formatter: on            }        }else {            while (!POCValidation.of(userInput).isValidCode()) {                MyLogger.WarnLog(GetMethods.class, "Sorry, but " + Util.join(userInput)                        + " is not a valide Code, please Enter the correct Code here:");                reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                        "Request: Find the nearest Postcode, Country and Region for  "+Util.join(userInput)+"\n"+                                "Answer: Sorry, but " + Util.join(userInput)                                + " is not a valide Code, please Enter the correct Code.");                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));                try {                    userInput = reader.readLine();                } catch (IOException e) {                    MyLogger.ErrorLog(Run.class, e.getMessage());                }                MyLogger.resInfoLog(Run.class,"Your input : "+userInput);                if (POCValidation.of(userInput).isValidCode()){                    nearestList = new ArrayList<CountryRegion>(Nearest.of(userInput).findNearest());                    reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                            "Request: Find the nearest Postcode, Country and Region for " + Util.join(userInput) + "\n"                                    + "Answer: \n" );                    for (int i = 0; i< nearestList.size();i++) {                        pco = nearestList.get(i).getInput();                        country = nearestList.get(i).getCountry();                        region = nearestList.get(i).getRegion();                        MyLogger.resInfoLog(GetMethods.class, "Postcode: " + pco);                        MyLogger.resInfoLog(GetMethods.class, "Country: " + country);                        MyLogger.resInfoLog(GetMethods.class, "Region: " + region);                        // @formatter: off                        reqAns.put(LocalTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME),                                (i+1)+ ") \n"+                                "Postcode: " + pco +                                "\nCountry: " + country +                                "\nRegion: " + region +"\n");                        // @formatter: on                    }                }            }        }        return reqAns;    }    public static void main(String[] args) throws IOException {        Run r = new Run();        r.runApp();    }}