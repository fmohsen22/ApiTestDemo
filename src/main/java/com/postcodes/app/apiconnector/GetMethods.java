package com.postcodes.app.apiconnector;import com.postcodes.framework.MyLogger;import com.postcodes.helper.Util;import javax.persistence.NoResultException;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.SocketTimeoutException;import java.net.URL;public class GetMethods {    //Constants related to get method    final static int TIMEOUT_VALUE = 10000;    public static String simpleGetRequest(String apiUrl)  {        StringBuffer fullResponseBuilder = new StringBuffer();        //Create the URL        MyLogger.InfoLog(GetMethods.class, String.valueOf(apiUrl));        URL url = null;        try {            url = new URL(apiUrl);        } catch (MalformedURLException e) {            MyLogger.ErrorLog(GetMethods.class, e.getMessage());        }        try {            HttpURLConnection con = (HttpURLConnection) url.openConnection();            con.setRequestMethod("GET");            //Read header            con.setRequestProperty("Content-Type", "application/json");            String contentType = con.getHeaderField("Content-Type");            MyLogger.InfoLog(GetMethods.class, String.valueOf(contentType));            //Set the timeout                con.setConnectTimeout(TIMEOUT_VALUE);                con.setReadTimeout(TIMEOUT_VALUE);            //Read the response            int status = con.getResponseCode();            Util.responseReader(GetMethods.class, status);            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));            String inputLine;            StringBuffer content = new StringBuffer();            while ((inputLine = in.readLine()) != null) {                content.append(inputLine);            }            in.close();            con.disconnect();            fullResponseBuilder = content;        }catch (SocketTimeoutException e) {            System.out.println("More than " + TIMEOUT_VALUE + " elapsed.");        } catch(NoResultException e) {            return null;        } catch (Exception e) {            MyLogger.ErrorLog(GetMethods.class, e.getMessage());        }        return fullResponseBuilder.toString();    }}