package testcases;import com.postcodes.app.POCValidation;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;public class TestValidation extends BaseTest{    String sampleCode = "CB3 0FA";    @Test    public void codeValidation(){        testSteps(1);        //with and without space it should work        assertTrue(POCValidation.of(sampleCode).isValidCode());        sampleCode =  "CB3 0FA";        assertTrue(POCValidation.of(sampleCode).isValidCode());        //Space before and after        testSteps(2);        sampleCode =  "       CB3 0FA        ";        assertTrue(POCValidation.of(sampleCode).isValidCode());        //Wronge Space        testSteps(3);        sampleCode = "CB3               0FA";        assertTrue(POCValidation.of(sampleCode).isValidCode());        sampleCode = "CB30F A";        assertTrue(POCValidation.of(sampleCode).isValidCode());        //null as an input        testSteps(4);        sampleCode = "";        assertFalse(POCValidation.of(sampleCode).isValidCode());        sampleCode = null;        assertFalse(POCValidation.of(sampleCode).isValidCode());        //wronge input        testSteps(5);        sampleCode = "11111";        assertFalse(POCValidation.of(sampleCode).isValidCode());        sampleCode = "a";        assertFalse(POCValidation.of(sampleCode).isValidCode());        sampleCode = "aaaaaaaaaaaaaaa";        assertFalse(POCValidation.of(sampleCode).isValidCode());        //Correct Codes (from other areas of UK) with different number of digits        testSteps(6);        sampleCode = "EC1A 1BB";        assertTrue(POCValidation.of(sampleCode).isValidCode());        sampleCode = "M1 1AE";        assertTrue(POCValidation.of(sampleCode).isValidCode());        sampleCode = "CR2 6XH";        assertTrue(POCValidation.of(sampleCode).isValidCode());        sampleCode = "DN55 1PT";        assertTrue(POCValidation.of(sampleCode).isValidCode());    }}